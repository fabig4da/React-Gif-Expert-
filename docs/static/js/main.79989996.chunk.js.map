{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifts.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGif","category","a","encodeURI","fetch","res","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categries","ReactDOM","render","document","getElementById"],"mappings":"4MAGcA,EAAa,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EACPC,mBAAS,IADF,mBACpCC,EADoC,KACxBC,EADwB,KAa3C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,QAAQ,IACzBR,GAAc,SAAAS,GAAU,OAAGP,GAAH,mBAAiBO,OACzCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,OCJlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEhC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCPHK,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACZN,EADY,0DAC4CO,UAAUF,GADtD,sDAEAG,MAAMR,GAFN,cAEZS,EAFY,gBAGGA,EAAIC,OAHP,uBAGXC,EAHW,EAGXA,KAEDC,EAAMD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACtB,MAAM,CACFC,GAAGD,EAAIC,GACPhB,MAAMe,EAAIf,MACVC,IAAG,UAACc,EAAIE,cAAL,aAAC,EAAYC,iBAAiBjB,QATvB,kBAaXY,GAbW,4CAAH,sDCINM,EAAQ,SAAC,GAAe,IAAdb,EAAa,EAAbA,SAAa,ECAR,SAACA,GAAc,IAAD,EAGZpB,mBAAS,CAC/B0B,KAAK,GACLQ,SAAQ,IAL0B,mBAG/BC,EAH+B,KAGxBC,EAHwB,KAgBtC,OARAC,qBAAU,WACNlB,EAAOC,GAAUkB,MAAK,SAAAC,GAClBH,EAAS,CAAEV,KAAKa,EAAML,SAAQ,SAEnC,CAAEd,IAIEe,EDdsBK,CAAapB,GAA/BW,EAFqB,EAE1BL,KAAaQ,EAFa,EAEbA,QAInB,OACI,qCAEI,6BAAKd,IACJc,GAAW,cACZ,qBAAKlB,UAAU,YAAf,SAEQe,EAAOH,KAAI,SAACC,GACR,OACA,wBAAC,EAAD,2BAAiBA,GAAjB,IAAsBY,IAAKZ,EAAIC,eEKxCY,EApBK,WAAK,IAAD,EACW1C,mBAAS,CAAC,YADrB,mBACf2C,EADe,KACJ5C,EADI,KAEtB,OACE,qCACE,8CACA,cAAE,EAAF,CAAcA,cAAeA,IAC7B,uBACA,6BAEI4C,EAAUf,KAAI,SAAAR,GACZ,OACA,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,YCT3BwB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.79989996.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport  const AddCategory =({setCategories})=> {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value)\r\n    } \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n        if(inputValue.trim().length>=2){\r\n            setCategories(categories=>[inputValue,...categories])\r\n            setInputValue('')\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__zoomIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","export const getGif = async(category)=>{\r\n    const url =`https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=ny4rqMozw2oNYva8p5bSnnUuCsU74U6z`;\r\n    const res = await fetch(url);\r\n    const {data} = await res.json()\r\n\r\n    const gifs= data.map(img=>{\r\n        return{\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n}\r\n","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nexport const GifGrid=({category})=> {\r\n\r\n    const{data:images, loading}= useFetchGifs(category)\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            \r\n            <h3>{category}</h3>\r\n            {loading && 'Cargando...'}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map((img)=>{\r\n                        return(\r\n                        <GifGridItem {...img} key={img.id}/>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport {getGif} from '../helpers/getGifts'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true,\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGif(category).then(imgs=>{\r\n            setState({ data:imgs, loading:false})\r\n        })\r\n    }, [ category ])\r\n\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp= ()=>{\n  const [categries, setCategories]=useState(['Simpson'])\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      < AddCategory setCategories={setCategories}/>\n      <hr />\n      <ol>\n        {\n          categries.map(category=>{\n            return(\n            <GifGrid key= {category} category={category} />\n            )\n          })\n        }\n      </ol>\n    </>\n  );\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n//reportWebVitals();\n"],"sourceRoot":""}